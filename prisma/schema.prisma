// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum GoalStatus {
    COMPLETED
    IN_REVIEW
    NOT_COMPLETED
    NEW
}

enum UserRole {
    ADMIN
    USER
    REVIEWER
}

model Goal {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    title          String
    description    String
    status         GoalStatus @default(NEW)
    createdAt      DateTime   @default(now())
    completeBefore DateTime
    user           User       @relation(fields: [userId], references: [id])
    userId         String     @db.ObjectId
    notes          Note[]

    @@map("goals")
}

model Note {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    createdAt   DateTime @default(now())
    goal        Goal     @relation(fields: [goalId], references: [id])
    goalId      String   @db.ObjectId
    userId      String   @db.ObjectId
    user        User     @relation(fields: [userId], references: [id])

    @@map("notes")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    role          UserRole  @default(USER)
    createdAt     DateTime  @default(now())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    goals         Goal[]
    Note          Note[]

    @@map("users")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
